package %{packages};

import java.io.IOException;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.text.ParseException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Date;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;

import org.json.JSONException;
import org.primefaces.model.UploadedFile;
import org.primefaces.model.StreamedContent;
import org.primefaces.component.fileupload.FileUpload;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.FlowEvent;

import ve.gob.cnti.gestion.bonita.IController;
import ve.gob.cnti.gestion.bonita.bean.DatosBasicosNatural;
import ve.gob.cnti.gestion.bonita.bean.Task;
import ve.gob.cnti.gestion.bonitaImpl.CaseImpl;
import ve.gob.cnti.gestion.bonitaImpl.ControllerImpl;
import ve.gob.cnti.gestion.bonitaImpl.TaskImpl;
import ve.gob.cnti.gestion.utils.FacesHandler;
import ve.gob.cnti.gestion.utils.Util_Dates;
import ve.gob.cnti.gestion.utils.Utils;
import ve.gob.cnti.gestion.utils.annotations.BeanIsInitCase;
import ve.gob.cnti.gestion.utils.annotations.FieldIsActuacion;
import ve.gob.cnti.gestion.alfresco.ICmisController;
import ve.gob.cnti.gestion.alfresco.impl.AlfrescoLoadFiles;
import ve.gob.cnti.gestion.controller.ProcessController;
import ve.gob.cnti.gestion.controller.TaskController;
import ve.gob.cnti.gestion.controller.beanFiles.BeanFile;
import ve.gob.cnti.gestion.controller.beanFiles.BeanFileServices;
import ve.gob.cnti.gestion.jms.JMSImp;
import ve.gob.cnti.gestion.exceptions.ConnectionComponentException;
import ve.gob.cnti.gestion.utils.Utils;
import ve.gob.cnti.gestion.exceptions.ConnectionComponentException;
import ve.gob.cnti.gestion.formfile.FileManager;
import ve.gob.cnti.gestion.formfile.FolderManager;
import %{packageBean}.%{NameBean};

@SuppressWarnings("unused")
@ManagedBean(name = "%{nameController}", eager = true)
@SessionScoped
public class %{NameController} {

	private ICmisController iCmis = new AlfrescoLoadFiles();
    private FacesHandler facesHandler = new FacesHandler();
    private IController iController = new ControllerImpl();
    private Utils util = new Utils();
    private UploadedFile uploadfile;
    private Task task;
	
	private BeanFile fileBean;
	private BeanFileServices fileServices = new BeanFileServices();
	private List<BeanFile> beanFiles = new ArrayList<BeanFile>();
	private Map<String, Integer> archivosProcesados = new HashMap<String, Integer>();
    
    %{files}

    private %{NameBean} bean = new %{NameBean}();

    public String executeTask() throws IllegalAccessException,
			IllegalArgumentException, InvocationTargetException,
			NoSuchFieldException, SecurityException,
			UnsupportedEncodingException, IllegalStateException, JSONException,
			IOException, InterruptedException {

    	   	
		try {
			Utils util=new Utils();
			// se verifican que los componentes de la plataforma esten activos
			util.validateComponents();
		    	   	
    		// variable del caso
    		String idCase = facesHandler.getParam("idCase");
    	
    		// Alfreco Path Folder
    		String alfrescoPath = "%{institucion}/%{processName}/"
    					+ idCase;
    	
    		this.task = new TaskImpl().getTaskbyCaseId(idCase);
    	
    		this.uploadFilesToAlfresco(alfrescoPath);  
        
        	if(bean.getClass().isAnnotationPresent(BeanIsInitCase.class))
				this.createPDF(alfrescoPath, idCase);
			else
				this.createPDFAction(alfrescoPath, idCase);
        
       		iController.completeTask(facesHandler.getParam("idTask"), util.convertObjectToListMap(this.bean));

        	new JMSImp().sendMessage(idCase);

           if(bean.getClass().isAnnotationPresent(BeanIsInitCase.class)){
            	Utils.addGlobalInfoFlashMessage("Su solicitud ha sido creada exitosamente bajo el Nro."+idCase);  	        	
                return "/views/interfazportalciudadano/view.xhtml?faces-redirect=true";
            }else{
            	Utils.addGlobalInfoFlashMessage("La solicitud Nro:"+idCase+" ha sido procesada");  	        	
                return "/views/interfazportalfuncionario/view.xhtml?faces-redirect=true";
            }
        
        } catch (ConnectionComponentException e) {        					
			e.printStackTrace();
			Utils.addGlobalErrorFlashMessage("Se ha producido un error al intentar procesar su solicitud. Favor intente mas tarde...");
		    if(bean.getClass().isAnnotationPresent(BeanIsInitCase.class))
				return "/views/interfazportalciudadano/errorSistema.xhtml?faces-redirect=true";
			else
				return "/views/interfazportalfuncionario/errorSistema.xhtml?faces-redirect=true";			
							
		}
    	
    }
    
    public void createPDF(String alfrescoPath, String idCase)
			throws UnsupportedEncodingException, IllegalStateException,
			JSONException, IOException, InterruptedException,
			IllegalArgumentException, IllegalAccessException {

		String htmlContent = util
				.readPdfTemplate("/views/%{institucion}/%{processName}/forms/carga/");

		Field[] atributos = this.bean.getClass().getDeclaredFields();
		for (Field atributo : atributos) {
			
			atributo.setAccessible(true);
		
			if (atributo.isAnnotationPresent(FieldIsActuacion.class) && atributo.get(bean)!=null) {
				
				if (atributo.get(this.bean) instanceof Date)
					htmlContent = htmlContent.replaceAll(
							"%\\{" + atributo.getName() + "\\}", util
									.getFormattedDate("dd/mm/yyyy",
											(String) atributo.get(this.bean)
													.toString()));
				else if(!atributo.getName().startsWith("_FILE_"))
					htmlContent = htmlContent.replaceAll(
							"%\\{" + atributo.getName() + "\\}",
							atributo.get(this.bean).toString());
			}
		}
		htmlContent = htmlContent.replaceAll("%\\{ProcessDisplayName\\}",
				new ProcessController().getProcessDisplayName(task
						.getProcessId()));
		htmlContent = htmlContent.replaceAll("%\\{idCase\\}", idCase);

		String idHash = util.createPDF(alfrescoPath, "Resumen de la Solicitud",
				htmlContent);

		new CaseImpl().updateCaseVariable("_FILE_datosBasicos", idCase, idHash);

	}

	
	@SuppressWarnings("unchecked")
    public void createPDFAction(String alfrescoPath,String idCase)
			throws UnsupportedEncodingException, IllegalStateException,
			JSONException, IOException, InterruptedException, IllegalArgumentException, IllegalAccessException, 
			NoSuchFieldException, SecurityException {

    	if(!task.getName().contentEquals("carga")){
    	
		String htmlContent = util.readPdfTemplate("/views/layout/pdfTemplate/");
				
		htmlContent = htmlContent.replaceAll("%\\{ProcessDisplayName\\}", new ProcessController().getProcessDisplayName(task.getProcessId()));
		htmlContent = htmlContent.replaceAll("%\\{idCase\\}", idCase);
		htmlContent = htmlContent.replaceAll("%\\{nameTask\\}", task.getDisplayName());
		htmlContent = htmlContent.replaceAll("%\\{funcionario\\}", facesHandler.getUserSession().get("email"));
		htmlContent = htmlContent.replaceAll("%\\{fecha\\}", new Util_Dates().getDate() + " " +new Util_Dates().getHour());
		
		if(task.getName().contentEquals("revision")){
			
			String revision = "",emailSGI = "N/A";			
			String causasDevolucion = "";
			
			Field[] atributos = this.bean.getClass().getDeclaredFields();
			for(Field atributo : atributos){
			
				atributo.setAccessible(true);
				
				if (atributo.isAnnotationPresent(FieldIsActuacion.class)) {
					
					if(atributo.getName().contentEquals("revision"))
						revision = (String) atributo.get(this.bean);
					
					if(atributo.getName().contentEquals("causasDevolucion"))
						causasDevolucion =  (String) atributo.get(this.bean);
					
					//if(atributo.getName().contentEquals("emailSGI"))
					//	emailSGI = (String) atributo.get(this.bean);
						
				}
			}
			
			String s = " ";
			if(causasDevolucion != null )
				if(!causasDevolucion.isEmpty())
					s += causasDevolucion;
			
			htmlContent = htmlContent.replaceAll("%\\{resultado\\}",revision + s);
			
			if(revision.contentEquals("Aprobado"))
				htmlContent = htmlContent.replaceAll("%\\{enviadoA\\}", emailSGI);
			else
				htmlContent = htmlContent.replaceAll("%\\{enviadoA\\}", "N/A");	
			
		}else{
			htmlContent = htmlContent.replaceAll("%\\{resultado\\}","N/A");
			htmlContent = htmlContent.replaceAll("%\\{enviadoA\\}", "N/A");
		}
		
		String idHash = util.createPDF(alfrescoPath, "Comprobante de Actuacion de "+task.getDisplayName(), htmlContent);
		
		List<String> actuaciones = new CaseImpl().getVariable("_FILE_actuaciones", Long.parseLong(idCase));
		
		actuaciones.add(idHash);

		new CaseImpl().updateCaseVariable("_FILE_actuaciones", idCase,(Serializable) actuaciones);

    	}
	}
    
    public %{NameBean} getBeanToBPM(String idCase,DatosBasicosNatural dbn,String isHistory) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, ParseException, NoSuchFieldException, SecurityException{
		
			
		if(idCase != null){
		
			%{NameBean} cd = null;
			
			if(isHistory.length()>0){			
				List<Map<String, String>> list = new CaseImpl().getVariablesHistoryByCaseId(idCase);			
				if(list.size()>0)
					cd = (%{NameBean}) util.convertListMapToObject(list,bean);
			}else
				cd = (%{NameBean}) util.convertListMapToObject(iController.getVariablesValues(idCase), bean);
				
			if (cd == null) 
				return new %{NameBean}();
			
			if(bean.getClass().isAnnotationPresent(BeanIsInitCase.class))
				cd = (%{NameBean}) new TaskController().setValuesFromIO(cd, dbn);
			
			return cd;
			
		}else
			return new %{NameBean}();	
			
	}
	
	@SuppressWarnings("unchecked")
	private boolean uploadFilesToAlfresco(String pathFolder)
			throws NoSuchFieldException, SecurityException,
			IllegalArgumentException, IllegalAccessException {

		Iterator<BeanFile> it = beanFiles.iterator();
		FacesHandler faceHandler=new FacesHandler();
		FolderManager folderManager=new FolderManager(task.getCaseId());
		FileManager fileManager=null;
		while (it.hasNext()) {
			BeanFile beanF = it.next();
			Field archVar = bean.getClass()
					.getDeclaredField(beanF.getVarName());
			archVar.setAccessible(true);
			List<String> stringTemps = new ArrayList<String>();
			int i = 1;
			for (String arch : beanF.getFileNames()) {
				fileManager=folderManager.getFileManager(arch);
				if (!beanF.isMultiple()) {
					archVar.set(
							bean,
							iCmis.uploadDocument(fileManager.findFile(), pathFolder, beanF
									.getVarName().replaceAll("_FILE_", "")
									.toUpperCase()+".pdf"));
				} else {
					stringTemps.add(iCmis.uploadDocument(fileManager.findFile(), pathFolder,
							beanF.getVarName().replaceAll("_FILE_", "")
							.toUpperCase() + "_" + i+".pdf"));
				}
				i++;
			}
			if (beanF.isMultiple())
				archVar.set(bean, stringTemps);

		}
		folderManager.deleteFolder();
		return true;
	}
	
	
	@SuppressWarnings("unchecked")
	public void fileUploadListener(FileUploadEvent e)
			throws IllegalArgumentException, IllegalAccessException,
			NoSuchFieldException, SecurityException {

		FileUpload uploadComponent = (FileUpload) e.getComponent();
		fileBean = fileServices.obtenerBeanFile(archivosProcesados,
				uploadComponent, beanFiles);
		
		FacesHandler faceHandler=new FacesHandler();
		FolderManager folderManager=new FolderManager(task.getCaseId());
		FileManager fileManager=null;
		if (fileServices.archivoValido(fileBean, e.getFile(),beanFiles)) {

            
			if (!fileBean.isMultiple() && fileBean.getFileNames().size() > 0) {				
				
				String name=fileBean.getFileNames().get(0);				
				fileManager=folderManager.getFileManager(name);
				fileManager.remove();
				fileBean.getFileNames().set(0, e.getFile().getFileName());
				fileManager=folderManager.getFileManager(e.getFile().getFileName());				
                fileManager.addFile(e.getFile());
                
			        				

			} else {
     			fileBean.getFileNames().add(e.getFile().getFileName());
				fileManager=folderManager.getFileManager(e.getFile().getFileName());
                fileManager.addFile(e.getFile());	
			}

			if (!archivosProcesados.containsKey(uploadComponent.getId())) {
				beanFiles.add(fileBean);
				archivosProcesados.put(uploadComponent.getId(),
						beanFiles.size() - 1);
			} else {
				beanFiles.set(archivosProcesados.get(uploadComponent.getId()),
						fileBean);
				beanFiles.set(archivosProcesados.get(uploadComponent.getId()),
						fileBean);
			}
		}

	}

	@SuppressWarnings("unchecked")
	public void removeFile(int i_bean, int i_archivo)
			throws NoSuchFieldException, SecurityException,
			IllegalArgumentException, IllegalAccessException {

		fileBean = beanFiles.get(i_bean);

		FacesHandler faceHandler=new FacesHandler();
		FolderManager folderManager=new FolderManager(task.getCaseId());
		FileManager fileManager=null;
		
		
		if (fileBean.getFileNames().size() == 1) {			
			archivosProcesados.remove(fileBean.getVarName());
			fileManager=folderManager.getFileManager(beanFiles.get(0).getVarName());
			beanFiles.remove(i_bean);			

		} else {
			
			fileManager=folderManager.getFileManager(fileBean.getFileNames().get(i_archivo));
			fileBean.getFileNames().remove(i_archivo);
			beanFiles.set(i_bean, fileBean); 
		}

	}

	public String onFlowProcess(FlowEvent e) throws NoSuchFieldException,
			SecurityException, IllegalArgumentException, IllegalAccessException {
		FacesHandler faceHandler=new FacesHandler();
		FolderManager folderManager=new FolderManager(task.getCaseId());
		FileManager fileManager=null;
		String temp = null;
		
		try {
			temp = (String) facesHandler.findComponent("files").getAttributes()
					.get("tabsNames");
			String tabs[] = temp.split(",");
			temp = (String) facesHandler.findComponent("files").getAttributes()
					.get("tabs");
			int nTabs = Integer.parseInt(temp);
			for (int i = 0; i < nTabs; i++) {
				if (e.getOldStep().contentEquals(tabs[i])) {
					if (facesHandler.findComponent("files").getAttributes()
							.containsKey(tabs[i])) {
						temp = (String) facesHandler.findComponent("files")
								.getAttributes().get(tabs[i]);
						String archivos[] = temp.split(",");

						String mandatory = "";
						for (int k = 0; k < archivos.length; k++) {
							mandatory = (String) facesHandler
									.findComponent("files").getAttributes()
									.get(archivos[k]);

							String name=null;
							BeanFile bean=null;
							for(BeanFile beanFind:beanFiles){
								if(archivos[k].equals(beanFind.getVarName()))	
									bean=beanFind;
							}
						
							if (bean.getFileNames().get(0) == null
									&& "requerido".contentEquals(mandatory)) {
								util.setMessageToView(
										"Tiene documentos pendientes por subir",
										1);
								return e.getOldStep();
							} else if (bean.getFileNames().get(0) != null
									&& "requerido".contentEquals(mandatory)) {
								fileManager=folderManager.getFileManager(beanFiles.get(0).getVarName());
								if (fileManager.findFile().length() == 0) {
									util.setMessageToView(
											"Tiene documentos pendientes por subir",
											1);
									return e.getOldStep();
								}
							}
						}
					}
				}
			}
		} catch (Exception e2) {}

		return e.getNewStep();
	}
	
	public StreamedContent get_FILE() {
		return util.getStreamPdfFile(facesHandler.getParam("id"));
	}

	public StreamedContent getDownloadFile() throws Exception {
		try {
			return util.getDownloadFile(facesHandler.getParam("id"));
		} catch (Exception e) {
			System.err.println(e.getMessage());
			return null;
		}
	}

    public %{NameBean} getBean() {
        return bean;
    }

    public void setBean(%{NameBean} bean) {
        this.bean = bean;
    }  
    
    public List<BeanFile> getBeanFiles() {
		return beanFiles;
	}

	public void setBeanFiles(List<BeanFile> beanFiles) {
		this.beanFiles = beanFiles;
	}

	public UploadedFile getUploadfile() {
		return uploadfile;
	}

	public void setUploadfile(UploadedFile uploadfile) {
		this.uploadfile = uploadfile;
	} 
	
    public Task getTask() {
		return task;
	}

	public void setTask(Task task) {
		this.task = task;
	}     
	
	
	    
	
	%{set_get_file_decision}

}