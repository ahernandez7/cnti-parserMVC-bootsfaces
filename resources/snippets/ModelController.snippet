package %{packages};

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.text.ParseException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;

import org.json.JSONException;
import org.primefaces.model.UploadedFile;
import org.primefaces.model.StreamedContent;
import org.primefaces.component.fileupload.FileUpload;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.FlowEvent;

import ve.gob.cnti.gestion.bonita.IController;
import ve.gob.cnti.gestion.bonita.bean.DatosBasicosNatural;
import ve.gob.cnti.gestion.bonita.bean.Task;
import ve.gob.cnti.gestion.bonitaImpl.CaseImpl;
import ve.gob.cnti.gestion.bonitaImpl.ControllerImpl;
import ve.gob.cnti.gestion.bonitaImpl.TaskImpl;
import ve.gob.cnti.gestion.utils.FacesHandler;
import ve.gob.cnti.gestion.utils.Utils;
import ve.gob.cnti.gestion.utils.annotations.BeanIsInitCase;
import ve.gob.cnti.gestion.utils.annotations.FieldIsActuacion;
import ve.gob.cnti.gestion.alfresco.ICmisController;
import ve.gob.cnti.gestion.alfresco.impl.AlfrescoLoadFiles;
import ve.gob.cnti.gestion.controller.ProcessController;
import ve.gob.cnti.gestion.controller.TaskController;
import ve.gob.cnti.gestion.controller.beanFiles.BeanFile;
import ve.gob.cnti.gestion.controller.beanFiles.BeanFileServices;
import ve.gob.cnti.gestion.jms.JMSImp;
import ve.gob.vicepresidencia.ProcesoGenerico.model.Carga;
import %{packageBean}.%{NameBean};

@SuppressWarnings("unused")
@ManagedBean(name = "%{nameController}", eager = true)
@SessionScoped
public class %{NameController} {

	private ICmisController iCmis = new AlfrescoLoadFiles();
    private FacesHandler facesHandler = new FacesHandler();
    private IController iController = new ControllerImpl();
    private Utils util = new Utils();
    private UploadedFile uploadfile;
	
	private BeanFile fileBean;
	private BeanFileServices fileServices = new BeanFileServices();
	private List<BeanFile> beanFiles = new ArrayList<BeanFile>();
	private Map<String, Integer> archivosProcesados = new HashMap<String, Integer>();
    
    %{files}

    private %{NameBean} bean = new %{NameBean}();

    public String executeTask() throws IllegalAccessException,
			IllegalArgumentException, InvocationTargetException,
			NoSuchFieldException, SecurityException,
			UnsupportedEncodingException, IllegalStateException, JSONException,
			IOException, InterruptedException {
    	// variable del caso
    	String idCase = facesHandler.getParam("idCase");
    	
    	// Alfreco Path Folder
    	String alfrescoPath = "%{institucion}/%{processName}/"
    					+ idCase;
    	
    	this.uploadFilesToAlfresco(alfrescoPath);  
        
        iController.completeTask(facesHandler.getParam("idTask"), util.convertObjectToListMap(bean));
        
        if(bean.getClass().isAnnotationPresent(BeanIsInitCase.class)){
			this.createPDF(alfrescoPath, idCase);
		}
        
        new JMSImp().sendMessage(idCase);
        
        return "%{DirViewSuccess}";
    }
    
    public void createPDF(String alfrescoPath,String idCase)
			throws UnsupportedEncodingException, IllegalStateException,
			JSONException, IOException, InterruptedException, IllegalArgumentException, IllegalAccessException {

		Task task = new TaskImpl().getTaskbyCaseId(idCase);
		
		String htmlContent = util.readPdfTemplate("/views/%{institucion}/%{processName}/forms/carga/");
		
		Field[] atributos = this.bean.getClass().getDeclaredFields();
		for(Field atributo : atributos){
			if (atributo.isAnnotationPresent(FieldIsActuacion.class)) {
				atributo.setAccessible(true);
				htmlContent = htmlContent.replaceAll("%\\{"+atributo.getName()+"\\}", (String) (atributo.get(this.bean)+""));
			}
		}
		htmlContent = htmlContent.replaceAll("%\\{ProcessDisplayName\\}", new ProcessController().getProcessDisplayName(task.getProcessId()));
		htmlContent = htmlContent.replaceAll("%\\{idCase\\}", idCase);
		
		String idHash = util.createPDF(alfrescoPath, "Planilla de Solicitud", htmlContent);

		new CaseImpl().updateCaseVariable("_FILE_datosBasicos", idCase, idHash);

	}
    
    public %{NameBean} getBeanToBPM(String idCase,DatosBasicosNatural dbn) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, ParseException, NoSuchFieldException, SecurityException{
		
		if(idCase != null){
		
			%{NameBean} cd = null;
			try {
				cd = (%{NameBean}) util.convertListMapToObject(
						iController.getVariablesValues(idCase), bean);
			} catch (IllegalAccessException e) {
			} catch (IllegalArgumentException e) {
			} catch (InvocationTargetException e) {
			} catch (ParseException e) {
			}
	
			if (cd == null) {
				return new %{NameBean}();
			}
			
			if(bean.getClass().isAnnotationPresent(BeanIsInitCase.class)){
				cd = (%{NameBean}) new TaskController().setValuesFromIO(cd, dbn);
			}
			
			return cd;
			
		}else
			return new %{NameBean}();	
	}
	
	@SuppressWarnings("unchecked")
	private boolean uploadFilesToAlfresco(String pathFolder)
			throws NoSuchFieldException, SecurityException,
			IllegalArgumentException, IllegalAccessException {

		Iterator<BeanFile> it = beanFiles.iterator();
		while (it.hasNext()) {
			BeanFile beanF = it.next();

			Field variable = this.getClass().getDeclaredField(
					beanF.getVarName());

			Field archVar = bean.getClass().getDeclaredField(
					beanF.getVarName());

			archVar.setAccessible(true);
			variable.setAccessible(true);

			List<UploadedFile> temp = new ArrayList<UploadedFile>();
			List<String> stringTemps = new ArrayList<String>();

			temp = (List<UploadedFile>) variable.get(this);
			int i = 1;
			for (UploadedFile arch : temp) {
				if (!beanF.isMultiple()) {
					archVar.set(
							bean,
							iCmis.uploadDocument(arch, pathFolder,
									beanF.getVarName()));
				} else{
					stringTemps.add(iCmis.uploadDocument(arch, pathFolder,
							beanF.getVarName() + "_" + i));					
				}
				i++;
			}
			if (beanF.isMultiple())
				archVar.set(bean,stringTemps);
			
		}
		
		return true;
	}
	
	
	@SuppressWarnings("unchecked")
	public void fileUploadListener(FileUploadEvent e)
			throws IllegalArgumentException, IllegalAccessException,
			NoSuchFieldException, SecurityException {

		FileUpload uploadComponent = (FileUpload) e.getComponent();

		fileBean = fileServices.obtenerBeanFile(archivosProcesados,
				uploadComponent, beanFiles);

		if (fileServices.archivoValido(fileBean, e.getFile(),beanFiles)) {

			Field variable = this.getClass().getDeclaredField(
					uploadComponent.getId());

			variable.setAccessible(true);
			List<UploadedFile> temp = new ArrayList<UploadedFile>();

			if (!fileBean.isMultiple() && fileBean.getFileNames().size() > 0) {

				fileBean.getFileNames().set(0, e.getFile().getFileName());

				temp.add(e.getFile());
				variable.set(this, temp);

			} else {
				if (variable.get(this) != null)
					temp = (List<UploadedFile>) variable.get(this);
				temp.add(e.getFile());
				variable.set(this, temp);
				fileBean.getFileNames().add(e.getFile().getFileName());
			}

			if (!archivosProcesados.containsKey(uploadComponent.getId())) {
				beanFiles.add(fileBean);
				archivosProcesados.put(uploadComponent.getId(),
						beanFiles.size() - 1);
			} else {
				beanFiles.set(archivosProcesados.get(uploadComponent.getId()),
						fileBean);
				beanFiles.set(archivosProcesados.get(uploadComponent.getId()),
						fileBean);
			}
		}

	}

	@SuppressWarnings("unchecked")
	public void removeFile(int i_bean, int i_archivo)
			throws NoSuchFieldException, SecurityException,
			IllegalArgumentException, IllegalAccessException {

		fileBean = beanFiles.get(i_bean);

		Field variable = this.getClass()
				.getDeclaredField(fileBean.getVarName());
		variable.setAccessible(true);
		List<UploadedFile> temp = new ArrayList<UploadedFile>();

		if (fileBean.getFileNames().size() == 1) {
			archivosProcesados.remove(fileBean.getVarName());
			beanFiles.remove(i_bean);
			variable.set(this, temp);
		} else {
			temp = (List<UploadedFile>) variable.get(this);
			temp.remove(i_archivo);
			fileBean.getFileNames().remove(i_archivo);
			beanFiles.set(i_bean, fileBean); 
		}

	}

	public String onFlowProcess(FlowEvent e) throws NoSuchFieldException,
			SecurityException, IllegalArgumentException, IllegalAccessException {

		String temp = null;
		try {
			temp = (String) facesHandler.findComponent("files").getAttributes()
					.get("tabsNames");
			String tabs[] = temp.split(",");
			temp = (String) facesHandler.findComponent("files").getAttributes()
					.get("tabs");
			int nTabs = Integer.parseInt(temp);
			for (int i = 0; i < nTabs; i++) {
				if (e.getOldStep().contentEquals(tabs[i])) {
					if (facesHandler.findComponent("files").getAttributes()
							.containsKey(tabs[i])) {
						temp = (String) facesHandler.findComponent("files")
								.getAttributes().get(tabs[i]);
						String archivos[] = temp.split(",");
						Field variable;
						String mandatory = "";
						for (int k = 0; k < archivos.length; k++) {
							mandatory = (String) facesHandler
									.findComponent("files").getAttributes()
									.get(archivos[k]);
							variable = this.getClass().getDeclaredField(
									archivos[k]);
							if (variable.get(this) == null
									&& "requerido".contentEquals(mandatory)) {
								util.setMessageToView(
										"Tiene documentos pendientes por subir",
										1);
								return e.getOldStep();
							} else if (variable.get(this) != null
									&& "requerido".contentEquals(mandatory)) {
								@SuppressWarnings("unchecked")
								List<UploadedFile> t = (List<UploadedFile>) variable
										.get(this);
								if (t.size() == 0) {
									util.setMessageToView(
											"Tiene documentos pendientes por subir",
											1);
									return e.getOldStep();
								}
							}
						}
					}
				}
			}
		} catch (Exception e2) {}

		return e.getNewStep();
	}
	
	public StreamedContent get_FILE() {
		return util.getStreamPdfFile(facesHandler.getParam("id"));
	}

	public StreamedContent getDownloadFile() throws Exception {
		try {
			return util.getDownloadFile(facesHandler.getParam("id"));
		} catch (Exception e) {
			System.err.println(e.getMessage());
			return null;
		}
	}

    public %{NameBean} getBean() {
        return bean;
    }

    public void setBean(%{NameBean} bean) {
        this.bean = bean;
    }  
    
    public List<BeanFile> getBeanFiles() {
		return beanFiles;
	}

	public void setBeanFiles(List<BeanFile> beanFiles) {
		this.beanFiles = beanFiles;
	}

	public UploadedFile getUploadfile() {
		return uploadfile;
	}

	public void setUploadfile(UploadedFile uploadfile) {
		this.uploadfile = uploadfile;
	}     

}